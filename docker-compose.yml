version: '3'

services:
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3

  redis-proxy:
    build: .
    ports:
      - "8080:8080"  # Proxy port
      - "8081:8081"  # Dashboard port
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_POOL_SIZE=10
      - PORT=8080
      - DASHBOARD_PORT=8081
      # Database logging for dashboard
      - DB_LOG_PATH=/app/data/proxy-logs.db
      - DB_MAX_ENTRIES=5000
      # Operation mode (uncomment one configuration)
      
      # For sync mode with path-based topics:
      - RESPONSE_TIMEOUT=30
      # - FIXED_TOPIC=incoming-messages
      
      # For async mode with path-based topics:
      # - RESPOND_IMMEDIATELY_STATUS_CODE=201
      
      # For async mode with fixed topic:
      # - FIXED_TOPIC=incoming-messages
      # - RESPOND_IMMEDIATELY_STATUS_CODE=201
      
      # Debug settings
      - DEBUG=true
      - DASHBOARD_DEBUG=true
    volumes:
      - proxy-data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  echo-server:
    build:
      context: ./sample-backend
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_TOPICS=incoming-messages,api:users,api:orders
      # For wildcard pattern matching:
      # - REDIS_TOPICS=*
      # - USE_PATTERN=true
      - DEBUG=true
      # Optional delay for testing:
      # - RESPONSE_DELAY_MS=200
    depends_on:
      redis:
        condition: service_healthy
    restart: always

volumes:
  redis-data:  # Persistent Redis data
  proxy-data:  # Persistent database storage